img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_KFOLD_performance_plot_A", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Hazardous$Accuracy[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="Accuracy")
boxplot(dt.Hazardous$MacroSensitivity[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroSensitivity")
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_KFOLD_performance_plot_B", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Hazardous$MacroSpecificity[2:end_table], vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroSpecificity")
boxplot(dt.Hazardous$MacroPrecision[2:end_table], vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroPrecision")
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_KFOLD_performance_plot_C", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Hazardous$MacroRecall[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroRecall")
boxplot(dt.Hazardous$MacroF1[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroF1")
dev.off()
img_name_plot <- paste("PDF_asteroids_model_DecisionTree_", "Hazardous_KFOLD_performance_tdist", ".pdf", sep = "")
pdf(img_name_plot, height = 20, width = 46)
grid.table(t(dt.Hazardous.All[2:length(dt.Hazardous.All)]))
dev.off()
rm(i)
decisionTree.Hazardous.GINI.stats <- decisionTree.Hazardous.GINI.stats / length(folds)
decisionTree.Hazardous.IGHE.stats <- decisionTree.Hazardous.IGHE.stats / length(folds)
img_name_plot <- paste("IMG_asteroids_model_DT_", "GINI_Hazardous_confusion" ,".png", sep = "")
png(img_name_plot)
grid.table(decisionTree.Hazardous.GINI.stats)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "IGHE_Hazardous_confusion" ,".png", sep = "")
png(img_name_plot)
grid.table(decisionTree.Hazardous.IGHE.stats)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_fold_split", ".png", sep = "")
png(img_name_plot)
par(mfrow=c(2,2))
barplot(as.numeric(folds.stats.Hazardous.trainsplit),main="Train",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Hazardous.validsplit),main="Valid",names.arg = folds.stats.namesplit, col='#a71e3b')
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_CP_TABLE" ,".png", sep = "")
png(img_name_plot)
printcp(decisionTree.Hazardous.GINI)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Hazardous_CP_PLOT" ,".png", sep = "")
png(img_name_plot)
plotcp(decisionTree.Hazardous.GINI)
dev.off()
#prunedDecisionTree = prune(decisionTree, cp= .011)
img_name_plot <- paste("IMG_asteroids_model_DT_","Hazardous_FANCY_PLOT", ".png", sep = "")
png(img_name_plot)
fancyRpartPlot(decisionTree.Hazardous.GINI)
dev.off()
rm(folds.stats.namesplit, folds.stats.Hazardous.trainsplit, folds.stats.Hazardous.validsplit, decisionTree.Hazardous.GINI.stats, decisionTree.Hazardous.IGHE.stats)
rm(decisionTree.Hazardous.GINI, decisionTree.Hazardous.IGHE)
rm(decisionTree.Hazardous.GINI.prediction, decisionTree.Hazardous.IGHE.prediction, decisionTree.Hazardous.GINI.confusion_matrix, decisionTree.Hazardous.IGHE.confusion_matrix)
## Classification Asteroids
folds.stats.namesplit <- list()
folds.stats.Classification.trainsplit.Amor <- list()
folds.stats.Classification.validsplit.Amor <- list()
folds.stats.Classification.trainsplit.Apohele <- list()
folds.stats.Classification.validsplit.Apohele <- list()
folds.stats.Classification.trainsplit.Apollo <- list()
folds.stats.Classification.validsplit.Apollo <- list()
folds.stats.Classification.trainsplit.Aten <- list()
folds.stats.Classification.validsplit.Aten <- list()
decisionTree.Classification.GINI.stats <- NULL
decisionTree.Classification.IGHE.stats <- NULL
mx = matrix(NA, nrow = length(folds))
dt.Classification <- list()
dt.Classification$Accuracy = data.frame(mx)
dt.Classification$MacroSensitivity <- data.frame(mx)
dt.Classification$MacroSpecificity <- data.frame(mx)
dt.Classification$MacroPrecision <- data.frame(mx)
dt.Classification$MacroRecall <- data.frame(mx)
dt.Classification$MacroF1 <- data.frame(mx)
#Amor
dt.Classification$Amor.AUC <- data.frame(mx)
dt.Classification$Amor.CutOffOpt <- data.frame(mx)
dt.Classification_ROC.Amor.x <- matrix()
dt.Classification_ROC.Amor.y <- matrix()
#Apohele
dt.Classification$Apohele.AUC <- data.frame(mx)
dt.Classification$Apohele.CutOffOpt <- data.frame(mx)
dt.Classification_ROC.Apohele.x <- matrix()
dt.Classification_ROC.Apohele.y <- matrix()
#Apollo
dt.Classification$Apollo.AUC <- data.frame(mx)
dt.Classification$Apollo.CutOffOpt <- data.frame(mx)
dt.Classification_ROC.Apollo.x <- matrix()
dt.Classification_ROC.Apollo.y <- matrix()
#Aten
dt.Classification$Aten.AUC <- data.frame(mx)
dt.Classification$Aten.CutOffOpt <- data.frame(mx)
dt.Classification_ROC.Aten.x <- matrix()
dt.Classification_ROC.Aten.y <- matrix()
dt.Classification_ROC.name <- c(NA)
mx = matrix(NA, nrow = 6)
dt.Classification.All <- data.frame(mx)
dt.Classification.All["Performance"] = c("Accuracy","MacroSensitivity","MacroSpecificity","MacroPrecision","MacroRecall","MacroF1")
rm(mx)
mx = matrix(NA, nrow = 8)
dt.Classification.ROC.All <- data.frame(mx)
dt.Classification.ROC.All["Performance"] = c("Amor AUC","Amor CutOffOpt","Apohele AUC","Apohele CutOffOpt","Apollo AUC","Apollo CutOffOpt","Aten AUC","Aten CutOffOpt")
rm(mx)
dt.Classification.GINI.foldstats <- list()
dt.Classification.IGHE.foldstats <- list()
dt.Classification.stats.GINI.roc.pred.prob <- list()
dt.Classification.stats.GINI.roc.thruth <- list()
dt.Classification.stats.IGHE.roc.pred.prob <- list()
dt.Classification.stats.IGHE.roc.thruth <- list()
for (i in 1:length(folds)) {
fold.valid <- ldply(folds[i], data.frame)
fold.valid <- fold.valid[ , !names(fold.valid) %in% c(".id")]
fold.train <- ldply(folds[-i], data.frame)
fold.train <- fold.train[ , !names(fold.train) %in% c(".id")]
name_fold <- paste("fold", as.character(i), sep = "")
folds.stats.namesplit <- append(folds.stats.namesplit, name_fold)
folds.stats.Classification.trainsplit.Amor <- append(folds.stats.Classification.trainsplit.Amor, round(sum(fold.train$Classification == "Amor Asteroid")/length(fold.train$Classification)*100, 4))
folds.stats.Classification.validsplit.Amor <- append(folds.stats.Classification.validsplit.Amor, round(sum(fold.valid$Classification == "Amor Asteroid")/length(fold.valid$Classification)*100, 4))
folds.stats.Classification.trainsplit.Apohele <- append(folds.stats.Classification.trainsplit.Apohele, round(sum(fold.train$Classification == "Apohele Asteroid")/length(fold.train$Classification)*100, 4))
folds.stats.Classification.validsplit.Apohele <- append(folds.stats.Classification.validsplit.Apohele, round(sum(fold.valid$Classification == "Apohele Asteroid")/length(fold.valid$Classification)*100, 4))
folds.stats.Classification.trainsplit.Apollo <- append(folds.stats.Classification.trainsplit.Apollo, round(sum(fold.train$Classification == "Apollo Asteroid")/length(fold.train$Classification)*100, 4))
folds.stats.Classification.validsplit.Apollo <- append(folds.stats.Classification.validsplit.Apollo, round(sum(fold.valid$Classification == "Apollo Asteroid")/length(fold.valid$Classification)*100, 4))
folds.stats.Classification.trainsplit.Aten <- append(folds.stats.Classification.trainsplit.Aten, round(sum(fold.train$Classification == "Aten Asteroid")/length(fold.train$Classification)*100, 4))
folds.stats.Classification.validsplit.Aten <- append(folds.stats.Classification.validsplit.Aten, round(sum(fold.valid$Classification == "Aten Asteroid")/length(fold.valid$Classification)*100, 4))
decisionTree.Classification.GINI <- rpart(Classification ~ Orbit.Axis..AU. + Orbit.Eccentricity + Orbit.Inclination..deg. + Perihelion.Argument..deg. + Node.Longitude..deg. + Mean.Anomoly..deg. + Perihelion.Distance..AU. + Aphelion.Distance..AU. + Orbital.Period..yr. + Minimum.Orbit.Intersection.Distance..AU. + Asteroid.Magnitude,#
data=fold.train, method="class",  cp= 0.001) #. all var
decisionTree.Classification.IGHE <- rpart(Classification ~ Orbit.Axis..AU. + Orbit.Eccentricity + Orbit.Inclination..deg. + Perihelion.Argument..deg. + Node.Longitude..deg. + Mean.Anomoly..deg. + Perihelion.Distance..AU. + Aphelion.Distance..AU. + Orbital.Period..yr. + Minimum.Orbit.Intersection.Distance..AU. + Asteroid.Magnitude,#
data=fold.train, method="class", parms = list(split="information"), cp=0.001) #. all var
#salvo anche la comple
#altezza
decisionTree.Classification.GINI.prediction <- predict(decisionTree.Classification.GINI, fold.valid, type = "class")
decisionTree.Classification.IGHE.prediction <- predict(decisionTree.Classification.IGHE, fold.valid, type = "class")
decisionTree.Classification.GINI.confusion_matrix_multiclass = confusionMatrix(
decisionTree.Classification.GINI.prediction, fold.valid$Classification, mode = "prec_recall")
decisionTree.Classification.IGHE.confusion_matrix_multiclass = confusionMatrix(
decisionTree.Classification.IGHE.prediction, fold.valid$Classification, mode = "prec_recall")
confusion.multi.GINI = decisionTree.Classification.GINI.confusion_matrix_multiclass$byClass
confusion.multi.IGHE = decisionTree.Classification.IGHE.confusion_matrix_multiclass$byClass
#GINI perf
sens_Amor.GINI = confusion.multi.GINI["Class: Amor Asteroid","Sensitivity"]
spec_Amor.GINI = confusion.multi.GINI["Class: Amor Asteroid","Specificity"]
prec_Amor.GINI = confusion.multi.GINI["Class: Amor Asteroid","Precision"]
recal_Amor.GINI = confusion.multi.GINI["Class: Amor Asteroid","Recall"]
f1_Amor.GINI = confusion.multi.GINI["Class: Amor Asteroid","F1"]
sens_Apohele.GINI = confusion.multi.GINI["Class: Apohele Asteroid","Sensitivity"]
spec_Apohele.GINI = confusion.multi.GINI["Class: Apohele Asteroid","Specificity"]
prec_Apohele.GINI = confusion.multi.GINI["Class: Apohele Asteroid","Precision"]
recal_Apohele.GINI = confusion.multi.GINI["Class: Apohele Asteroid","Recall"]
f1_Apohele.GINI = confusion.multi.GINI["Class: Apohele Asteroid","F1"]
sens_Apollo.GINI = confusion.multi.GINI["Class: Apollo Asteroid","Sensitivity"]
spec_Apollo.GINI = confusion.multi.GINI["Class: Apollo Asteroid","Specificity"]
prec_Apollo.GINI = confusion.multi.GINI["Class: Apollo Asteroid","Precision"]
recal_Apollo.GINI = confusion.multi.GINI["Class: Apollo Asteroid","Recall"]
f1_Apollo.GINI = confusion.multi.GINI["Class: Apollo Asteroid","F1"]
sens_Aten.GINI = confusion.multi.GINI["Class: Aten Asteroid","Sensitivity"]
spec_Aten.GINI = confusion.multi.GINI["Class: Aten Asteroid","Specificity"]
prec_Aten.GINI = confusion.multi.GINI["Class: Aten Asteroid","Precision"]
recal_Aten.GINI = confusion.multi.GINI["Class: Aten Asteroid","Recall"]
f1_Aten.GINI = confusion.multi.GINI["Class: Aten Asteroid","F1"]
#IGHE perf
sens_Amor.IGHE = confusion.multi.IGHE["Class: Amor Asteroid","Sensitivity"]
spec_Amor.IGHE = confusion.multi.IGHE["Class: Amor Asteroid","Specificity"]
prec_Amor.IGHE = confusion.multi.IGHE["Class: Amor Asteroid","Precision"]
recal_Amor.IGHE = confusion.multi.IGHE["Class: Amor Asteroid","Recall"]
f1_Amor.IGHE = confusion.multi.IGHE["Class: Amor Asteroid","F1"]
sens_Apohele.IGHE = confusion.multi.IGHE["Class: Apohele Asteroid","Sensitivity"]
spec_Apohele.IGHE = confusion.multi.IGHE["Class: Apohele Asteroid","Specificity"]
prec_Apohele.IGHE = confusion.multi.IGHE["Class: Apohele Asteroid","Precision"]
recal_Apohele.IGHE = confusion.multi.IGHE["Class: Apohele Asteroid","Recall"]
f1_Apohele.IGHE = confusion.multi.IGHE["Class: Apohele Asteroid","F1"]
sens_Apollo.IGHE = confusion.multi.IGHE["Class: Apollo Asteroid","Sensitivity"]
spec_Apollo.IGHE = confusion.multi.IGHE["Class: Apollo Asteroid","Specificity"]
prec_Apollo.IGHE = confusion.multi.IGHE["Class: Apollo Asteroid","Precision"]
recal_Apollo.IGHE = confusion.multi.IGHE["Class: Apollo Asteroid","Recall"]
f1_Apollo.IGHE = confusion.multi.IGHE["Class: Apollo Asteroid","F1"]
sens_Aten.IGHE = confusion.multi.IGHE["Class: Aten Asteroid","Sensitivity"]
spec_Aten.IGHE = confusion.multi.IGHE["Class: Aten Asteroid","Specificity"]
prec_Aten.IGHE = confusion.multi.IGHE["Class: Aten Asteroid","Precision"]
recal_Aten.IGHE = confusion.multi.IGHE["Class: Aten Asteroid","Recall"]
f1_Aten.IGHE = confusion.multi.IGHE["Class: Aten Asteroid","F1"]
#GINI MACROs
MacroSensitivity.GINI = (0.25 * sens_Amor.GINI) + (0.25 * sens_Apohele.GINI) + (0.25 * sens_Apollo.GINI) + (0.25 * sens_Aten.GINI)
MacroSpecificity.GINI = (0.25 * spec_Amor.GINI) + (0.25 * spec_Apohele.GINI) + (0.25 * spec_Apollo.GINI) + (0.25 * spec_Aten.GINI)
MacroPrecision.GINI = (0.25 * prec_Amor.GINI) + (0.25 * prec_Apohele.GINI) + (0.25 * prec_Apollo.GINI) + (0.25 * prec_Aten.GINI)
MacroRecall.GINI = (0.25 * recal_Amor.GINI) + (0.25 * recal_Apohele.GINI) + (0.25 * recal_Apollo.GINI) + (0.25 * recal_Aten.GINI)
MacroF1.GINI = (0.25 * f1_Amor.GINI) + (0.25 * f1_Apohele.GINI) + (0.25 * f1_Apollo.GINI) + (0.25 * prec_Aten.GINI)
#IGHE MACROs
MacroSensitivity.IGHE = (0.25 * sens_Amor.IGHE) + (0.25 * sens_Apohele.IGHE) + (0.25 * sens_Apollo.IGHE) + (0.25 * sens_Aten.IGHE)
MacroSpecificity.IGHE = (0.25 * spec_Amor.IGHE) + (0.25 * spec_Apohele.IGHE) + (0.25 * spec_Apollo.IGHE) + (0.25 * spec_Aten.IGHE)
MacroPrecision.IGHE = (0.25 * prec_Amor.IGHE) + (0.25 * prec_Apohele.IGHE) + (0.25 * prec_Apollo.IGHE) + (0.25 * prec_Aten.IGHE)
MacroRecall.IGHE = (0.25 * recal_Amor.IGHE) + (0.25 * recal_Apohele.IGHE) + (0.25 * recal_Apollo.IGHE) + (0.25 * recal_Aten.IGHE)
MacroF1.IGHE = (0.25 * f1_Amor.IGHE) + (0.25 * f1_Apohele.IGHE) + (0.25 * f1_Apollo.IGHE) + (0.25 * prec_Aten.IGHE)
dt.Classification.GINI.foldstats$Accuracy    = append(dt.Classification.GINI.foldstats$Accuracy, decisionTree.Classification.GINI.confusion_matrix_multiclass$overall["Accuracy"])
dt.Classification.GINI.foldstats$MacroSensitivity = append(dt.Classification.GINI.foldstats$MacroSensitivity, MacroSensitivity.GINI)
dt.Classification.GINI.foldstats$MacroSpecificity = append(dt.Classification.GINI.foldstats$MacroSpecificity, MacroSpecificity.GINI)
dt.Classification.GINI.foldstats$MacroPrecision = append(dt.Classification.GINI.foldstats$MacroPrecision, MacroPrecision.GINI)
dt.Classification.GINI.foldstats$MacroRecall = append(dt.Classification.GINI.foldstats$MacroRecall, MacroRecall.GINI)
dt.Classification.GINI.foldstats$MacroF1 = append(dt.Classification.GINI.foldstats$MacroF1, MacroF1.GINI)
dt.Classification.IGHE.foldstats$Accuracy    = append(dt.Classification.IGHE.foldstats$Accuracy, decisionTree.Classification.IGHE.confusion_matrix_multiclass$overall["Accuracy"])
dt.Classification.IGHE.foldstats$MacroSensitivity = append(dt.Classification.IGHE.foldstats$MacroSensitivity, MacroSensitivity.IGHE)
dt.Classification.IGHE.foldstats$MacroSpecificity = append(dt.Classification.IGHE.foldstats$MacroSpecificity, MacroSpecificity.IGHE)
dt.Classification.IGHE.foldstats$MacroPrecision = append(dt.Classification.IGHE.foldstats$MacroPrecision, MacroPrecision.IGHE)
dt.Classification.IGHE.foldstats$MacroRecall = append(dt.Classification.IGHE.foldstats$MacroRecall, MacroRecall.IGHE)
dt.Classification.IGHE.foldstats$MacroF1 = append(dt.Classification.IGHE.foldstats$MacroF1, MacroF1.IGHE)
decisionTree.Classification.GINI.confusion_matrix <- table(fold.valid$Classification, decisionTree.Classification.GINI.prediction)
decisionTree.Classification.IGHE.confusion_matrix <- table(fold.valid$Classification, decisionTree.Classification.IGHE.prediction)
if (is.null(decisionTree.Classification.GINI.stats)){
decisionTree.Classification.GINI.stats <- decisionTree.Classification.GINI.confusion_matrix
}else{
decisionTree.Classification.GINI.stats <- decisionTree.Classification.GINI.stats + decisionTree.Classification.GINI.confusion_matrix
}
if (is.null(decisionTree.Classification.IGHE.stats)){
decisionTree.Classification.IGHE.stats <- decisionTree.Classification.IGHE.confusion_matrix
}else{
decisionTree.Classification.IGHE.stats <- decisionTree.Classification.IGHE.stats + decisionTree.Classification.IGHE.confusion_matrix
}
#ROC
#ROC GINI
ROCFun.pred.prob.fold = predict(decisionTree.Classification.GINI, fold.valid,  probability=TRUE)
dt.Classification.stats.GINI.roc.pred.prob = rbind(dt.Classification.stats.GINI.roc.pred.prob,ROCFun.pred.prob.fold)
dt.Classification.stats.GINI.roc.thruth = append(dt.Classification.stats.GINI.roc.thruth, as.factor(fold.valid$Classification))
#ROC IGHE
ROCFun.pred.prob.fold = predict(decisionTree.Classification.IGHE, fold.valid,  probability=TRUE)
dt.Classification.stats.IGHE.roc.pred.prob = rbind(dt.Classification.stats.IGHE.roc.pred.prob,ROCFun.pred.prob.fold)
dt.Classification.stats.IGHE.roc.thruth = append(dt.Classification.stats.IGHE.roc.thruth, as.factor(fold.valid$Classification))
}
#end kfold
#GINI MODEL
dt.name <- paste("Classification GINI")
dt.Classification$Accuracy[dt.name] <- dt.Classification.GINI.foldstats$Accuracy
dt.Classification$MacroSensitivity[dt.name] <- dt.Classification.GINI.foldstats$MacroSensitivity
dt.Classification$MacroSpecificity[dt.name] <- dt.Classification.GINI.foldstats$MacroSpecificity
dt.Classification$MacroPrecision[dt.name] <- dt.Classification.GINI.foldstats$MacroPrecision
dt.Classification$MacroRecall[dt.name] <- dt.Classification.GINI.foldstats$MacroRecall
dt.Classification$MacroF1[dt.name] <- dt.Classification.GINI.foldstats$MacroF1
dt.Classification.roc.Amor = ROCFunction.MULTI(dt.Classification.stats.GINI.roc.pred.prob,dt.Classification.stats.GINI.roc.thruth,"Amor Asteroid")
dt.Classification.roc.Apohele = ROCFunction.MULTI(dt.Classification.stats.GINI.roc.pred.prob,dt.Classification.stats.GINI.roc.thruth,"Apohele Asteroid")
dt.Classification.roc.Apollo = ROCFunction.MULTI(dt.Classification.stats.GINI.roc.pred.prob,dt.Classification.stats.GINI.roc.thruth,"Apollo Asteroid")
dt.Classification.roc.Aten = ROCFunction.MULTI(dt.Classification.stats.GINI.roc.pred.prob,dt.Classification.stats.GINI.roc.thruth,"Aten Asteroid")
#roc
dt.Classification$Amor.AUC[dt.name] <- dt.Classification.roc.Amor$auc
dt.Classification$Amor.CutOffOpt[dt.name] <- dt.Classification.roc.Amor$optcut
dt.Classification$Apohele.AUC[dt.name] <- dt.Classification.roc.Apohele$auc
dt.Classification$Apohele.CutOffOpt[dt.name] <- dt.Classification.roc.Apohele$optcut
dt.Classification$Apollo.AUC[dt.name] <- dt.Classification.roc.Apollo$auc
dt.Classification$Apollo.CutOffOpt[dt.name] <- dt.Classification.roc.Apollo$optcut
dt.Classification$Aten.AUC[dt.name] <- dt.Classification.roc.Aten$auc
dt.Classification$Aten.CutOffOpt[dt.name] <- dt.Classification.roc.Aten$optcut
# ROC DATA FRAMES
dt.Classification_ROC.name = c(dt.Classification_ROC.name, dt.name)
dt.Classification_ROC.Amor.x <- cbindX(dt.Classification_ROC.Amor.x, data.frame(dt.Classification.roc.Amor$x.value))
colnames(dt.Classification_ROC.Amor.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Amor.y <- cbindX(dt.Classification_ROC.Amor.y, data.frame(dt.Classification.roc.Amor$y.value))
colnames(dt.Classification_ROC.Amor.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Apohele.x <- cbindX(dt.Classification_ROC.Apohele.x, data.frame(dt.Classification.roc.Apohele$x.value))
colnames(dt.Classification_ROC.Apohele.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Apohele.y <- cbindX(dt.Classification_ROC.Apohele.y, data.frame(dt.Classification.roc.Apohele$y.value))
colnames(dt.Classification_ROC.Apohele.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Apollo.x <- cbindX(dt.Classification_ROC.Apollo.x, data.frame(dt.Classification.roc.Apollo$x.value))
colnames(dt.Classification_ROC.Apollo.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Apollo.y <- cbindX(dt.Classification_ROC.Apollo.y, data.frame(dt.Classification.roc.Apollo$y.value))
colnames(dt.Classification_ROC.Apollo.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Aten.x <- cbindX(dt.Classification_ROC.Aten.x, data.frame(dt.Classification.roc.Aten$x.value))
colnames(dt.Classification_ROC.Aten.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Aten.y <- cbindX(dt.Classification_ROC.Aten.y, data.frame(dt.Classification.roc.Aten$y.value))
colnames(dt.Classification_ROC.Aten.y) <- dt.Classification_ROC.name
tdist <- list()
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$Accuracy),0.95)
tdist$acc <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$MacroSensitivity),0.95)
tdist$sens <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$MacroSpecificity),0.95)
tdist$spec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$MacroPrecision),0.95)
tdist$prec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$MacroRecall),0.95)
tdist$rec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.GINI.foldstats$MacroF1),0.95)
tdist$f1 <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
dt.Classification.All[dt.name] <- c(tdist$acc,tdist$sens,tdist$spec,tdist$prec,tdist$rec,tdist$f1)
rdist <- list()
rdist_name <- paste("Class ",hyper.kernel,as.character(hyper.cost),sep=" ")
rdist_val = dt.Classification.roc.Amor$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Amor$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Apohele$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Apohele$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Apollo$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Apollo$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Aten$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Aten$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
dt.Classification.ROC.All[rdist_name] <- c(rdist$acc,rdist$sens,rdist$spec,rdist$prec,rdist$rec,rdist$f1,rdist$auc,rdist$cutoff)
#IGHE MODEL
dt.name <- paste("Classification IGHE")
dt.Classification$Accuracy[dt.name] <- dt.Classification.IGHE.foldstats$Accuracy
dt.Classification$MacroSensitivity[dt.name] <- dt.Classification.IGHE.foldstats$MacroSensitivity
dt.Classification$MacroSpecificity[dt.name] <- dt.Classification.IGHE.foldstats$MacroSpecificity
dt.Classification$MacroPrecision[dt.name] <- dt.Classification.IGHE.foldstats$MacroPrecision
dt.Classification$MacroRecall[dt.name] <- dt.Classification.IGHE.foldstats$MacroRecall
dt.Classification$MacroF1[dt.name] <- dt.Classification.IGHE.foldstats$MacroF1
dt.Classification.roc.Amor = ROCFunction.MULTI(dt.Classification.stats.IGHE.roc.pred.prob,dt.Classification.stats.IGHE.roc.thruth,"Amor Asteroid")
dt.Classification.roc.Apohele = ROCFunction.MULTI(dt.Classification.stats.IGHE.roc.pred.prob,dt.Classification.stats.IGHE.roc.thruth,"Apohele Asteroid")
dt.Classification.roc.Apollo = ROCFunction.MULTI(dt.Classification.stats.IGHE.roc.pred.prob,dt.Classification.stats.IGHE.roc.thruth,"Apollo Asteroid")
dt.Classification.roc.Aten = ROCFunction.MULTI(dt.Classification.stats.IGHE.roc.pred.prob,dt.Classification.stats.IGHE.roc.thruth,"Aten Asteroid")
#roc
dt.Classification$Amor.AUC[dt.name] <- dt.Classification.roc.Amor$auc
dt.Classification$Amor.CutOffOpt[dt.name] <- dt.Classification.roc.Amor$optcut
dt.Classification$Apohele.AUC[dt.name] <- dt.Classification.roc.Apohele$auc
dt.Classification$Apohele.CutOffOpt[dt.name] <- dt.Classification.roc.Apohele$optcut
dt.Classification$Apollo.AUC[dt.name] <- dt.Classification.roc.Apollo$auc
dt.Classification$Apollo.CutOffOpt[dt.name] <- dt.Classification.roc.Apollo$optcut
dt.Classification$Aten.AUC[dt.name] <- dt.Classification.roc.Aten$auc
dt.Classification$Aten.CutOffOpt[dt.name] <- dt.Classification.roc.Aten$optcut
# ROC DATA FRAMES
dt.Classification_ROC.name = c(dt.Classification_ROC.name, dt.name)
dt.Classification_ROC.Amor.x <- cbindX(dt.Classification_ROC.Amor.x, data.frame(dt.Classification.roc.Amor$x.value))
colnames(dt.Classification_ROC.Amor.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Amor.y <- cbindX(dt.Classification_ROC.Amor.y, data.frame(dt.Classification.roc.Amor$y.value))
colnames(dt.Classification_ROC.Amor.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Apohele.x <- cbindX(dt.Classification_ROC.Apohele.x, data.frame(dt.Classification.roc.Apohele$x.value))
colnames(dt.Classification_ROC.Apohele.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Apohele.y <- cbindX(dt.Classification_ROC.Apohele.y, data.frame(dt.Classification.roc.Apohele$y.value))
colnames(dt.Classification_ROC.Apohele.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Apollo.x <- cbindX(dt.Classification_ROC.Apollo.x, data.frame(dt.Classification.roc.Apollo$x.value))
colnames(dt.Classification_ROC.Apollo.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Apollo.y <- cbindX(dt.Classification_ROC.Apollo.y, data.frame(dt.Classification.roc.Apollo$y.value))
colnames(dt.Classification_ROC.Apollo.y) <- dt.Classification_ROC.name
dt.Classification_ROC.Aten.x <- cbindX(dt.Classification_ROC.Aten.x, data.frame(dt.Classification.roc.Aten$x.value))
colnames(dt.Classification_ROC.Aten.x) <- dt.Classification_ROC.name
dt.Classification_ROC.Aten.y <- cbindX(dt.Classification_ROC.Aten.y, data.frame(dt.Classification.roc.Aten$y.value))
colnames(dt.Classification_ROC.Aten.y) <- dt.Classification_ROC.name
tdist <- list()
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$Accuracy),0.95)
tdist$acc <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$MacroSensitivity),0.95)
tdist$sens <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$MacroSpecificity),0.95)
tdist$spec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$MacroPrecision),0.95)
tdist$prec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$MacroRecall),0.95)
tdist$rec <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
tdist_val = confidence_interval(as.vector(dt.Classification.IGHE.foldstats$MacroF1),0.95)
tdist$f1 <- paste(as.character(round(tdist_val[2],4))," ± ",as.character(round(tdist_val[1],4)))
dt.Classification.All[dt.name] <- c(tdist$acc,tdist$sens,tdist$spec,tdist$prec,tdist$rec,tdist$f1)
rdist <- list()
rdist_name <- paste("Class ",hyper.kernel,as.character(hyper.cost),sep=" ")
rdist_val = dt.Classification.roc.Amor$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Amor$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Apohele$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Apohele$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Apollo$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Apollo$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
rdist_val = dt.Classification.roc.Aten$auc
rdist$auc <- paste(as.character(round(rdist_val,8)))
rdist_val = dt.Classification.roc.Aten$optcut
rdist$cutoff <- paste(as.character(round(rdist_val,5)))
dt.Classification.ROC.All[rdist_name] <- c(rdist$acc,rdist$sens,rdist$spec,rdist$prec,rdist$rec,rdist$f1,rdist$auc,rdist$cutoff)
#PLOT CLASSIFICATION
end_table <- length(dt.Classification$Accuracy)
plot.models.color = rainbow(end_table-1)
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_KFOLD_ROC", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
# Amor
plot.new()
ROCPlot.x.class = colnames(dt.Classification_ROC.Amor.x)
ROCPlot.y.class = colnames(dt.Classification_ROC.Amor.y)
title(main="ROC Class: Amor", xlab="Sensitivity - True Positive Rate", ylab="Specificity - False Positive Rate")
for (ROCPlot.x.classindex in 2:length(ROCPlot.x.class)){
ROCPlot.name = ROCPlot.x.class[ROCPlot.x.classindex]
ROCPlot.y.classindex = which(ROCPlot.y.class == ROCPlot.x.class[ROCPlot.x.classindex])
ROCPlot.x = unlist(dt.Classification_ROC.Amor.x[,ROCPlot.x.classindex], use.names=FALSE)
ROCPlot.y = unlist(dt.Classification_ROC.Amor.x[,ROCPlot.y.classindex], use.names=FALSE)
lines(ROCPlot.x, ROCPlot.y, col=plot.models.color[ROCPlot.x.classindex-1],lwd=1)
}
legend("right", title="models",legend=ROCPlot.y.class,lwd=5, col=plot.models.color,horiz=FALSE)
#Apohele
plot.new()
ROCPlot.x.class = colnames(dt.Classification_ROC.Apohele.x)
ROCPlot.y.class = colnames(dt.Classification_ROC.Apohele.y)
title(main="ROC Class: Apohele", xlab="Sensitivity - True Positive Rate", ylab="Specificity - False Positive Rate")
for (ROCPlot.x.classindex in 2:length(ROCPlot.x.class)){
ROCPlot.name = ROCPlot.x.class[ROCPlot.x.classindex]
ROCPlot.y.classindex = which(ROCPlot.y.class == ROCPlot.x.class[ROCPlot.x.classindex])
ROCPlot.x = unlist(dt.Classification_ROC.Apohele.x[,ROCPlot.x.classindex], use.names=FALSE)
ROCPlot.y = unlist(dt.Classification_ROC.Apohele.y[,ROCPlot.y.classindex], use.names=FALSE)
lines(ROCPlot.x, ROCPlot.y, col=plot.models.color[ROCPlot.x.classindex-1],lwd=1)
}
legend("right", title="models",legend=ROCPlot.y.class,lwd=5, col=plot.models.color,horiz=FALSE)
#Apollo
plot.new()
ROCPlot.x.class = colnames(dt.Classification_ROC.Apollo.x)
ROCPlot.y.class = colnames(dt.Classification_ROC.Apollo.y)
title(main="ROC Class: Apollo", xlab="Sensitivity - True Positive Rate", ylab="Specificity - False Positive Rate")
for (ROCPlot.x.classindex in 2:length(ROCPlot.x.class)){
ROCPlot.name = ROCPlot.x.class[ROCPlot.x.classindex]
ROCPlot.y.classindex = which(ROCPlot.y.class == ROCPlot.x.class[ROCPlot.x.classindex])
ROCPlot.x = unlist(dt.Classification_ROC.Apollo.x[,ROCPlot.x.classindex], use.names=FALSE)
ROCPlot.y = unlist(dt.Classification_ROC.Apollo.y[,ROCPlot.y.classindex], use.names=FALSE)
lines(ROCPlot.x, ROCPlot.y, col=plot.models.color[ROCPlot.x.classindex-1],lwd=1)
}
legend("right", title="models",legend=ROCPlot.y.class,lwd=5, col=plot.models.color,horiz=FALSE)
#Aten
plot.new()
ROCPlot.x.class = colnames(dt.Classification_ROC.Aten.x)
ROCPlot.y.class = colnames(dt.Classification_ROC.Aten.y)
title(main="ROC Class: Aten", xlab="Sensitivity - True Positive Rate", ylab="Specificity - False Positive Rate")
for (ROCPlot.x.classindex in 2:length(ROCPlot.x.class)){
ROCPlot.name = ROCPlot.x.class[ROCPlot.x.classindex]
ROCPlot.y.classindex = which(ROCPlot.y.class == ROCPlot.x.class[ROCPlot.x.classindex])
ROCPlot.x = unlist(dt.Classification_ROC.Aten.x[,ROCPlot.x.classindex], use.names=FALSE)
ROCPlot.y = unlist(dt.Classification_ROC.Aten.y[,ROCPlot.y.classindex], use.names=FALSE)
lines(ROCPlot.x, ROCPlot.y, col=plot.models.color[ROCPlot.x.classindex-1],lwd=1)
}
legend("right", title="models",legend=ROCPlot.y.class,lwd=5, col=plot.models.color,horiz=FALSE)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_KFOLD_performance_plot_A", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Classification$Accuracy[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="Accuracy")
boxplot(dt.Classification$MacroSensitivity[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroSensitivity")
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_KFOLD_performance_plot_B", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Classification$MacroSpecificity[2:end_table], vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroSpecificity")
boxplot(dt.Classification$MacroPrecision[2:end_table], vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroPrecision")
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_KFOLD_performance_plot_C", ".png", sep = "")
png(img_name_plot,res = 800, height = 10, width = 15, unit='in')
par(mfrow=c(2,2))
boxplot(dt.Classification$MacroRecall[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroRecall")
boxplot(dt.Classification$MacroF1[2:end_table],vertical = TRUE, pch=19, las = 2, col = plot.models.color,main="MacroF1")
dev.off()
img_name_plot <- paste("PDF_asteroids_model_DT_", "Classification_KFOLD_performance_tdist", ".pdf", sep = "")
pdf(img_name_plot, height = 20, width = 46)
grid.table(t(dt.Classification.All[2:length(dt.Classification.All)]))
dev.off()
img_name_plot <- paste("PDF_asteroids_model_DT_", "Classification_KFOLD_performance_ROC", ".pdf", sep = "")
pdf(img_name_plot, height = 20, width = 46)
grid.table(t(dt.Classification.ROC.All[2:length(dt.Classification.ROC.All)]))
dev.off()
# PLOT DT
decisionTree.Classification.GINI.stats = decisionTree.Classification.GINI.stats / length(folds)
decisionTree.Classification.IGHE.stats = decisionTree.Classification.IGHE.stats / length(folds)
img_name_plot <- paste("IMG_asteroids_model_DT_", "GINI_Classification_confusion" ,".png", sep = "")
png(img_name_plot)
grid.table(decisionTree.Classification.GINI.stats)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "IGHE_Classification_confusion" ,".png", sep = "")
png(img_name_plot)
grid.table(decisionTree.Classification.IGHE.stats)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_fold_split", ".png", sep = "")
png(img_name_plot)
par(mfrow=c(4,2))
barplot(as.numeric(folds.stats.Classification.trainsplit.Amor),main="Amor Train",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.validsplit.Amor),main="Amor Valid",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.trainsplit.Apohele),main="Apohele Train",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.validsplit.Apohele),main="Apohele Valid",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.trainsplit.Apollo),main="Apollo Train",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.validsplit.Apollo),main="Apollo Valid",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.trainsplit.Aten),main="Aten Train",names.arg = folds.stats.namesplit, col='#a71e3b')
barplot(as.numeric(folds.stats.Classification.validsplit.Aten),main="Aten Valid",names.arg = folds.stats.namesplit, col='#a71e3b')
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_CP_TABLE_GINI" ,".png", sep = "")
png(img_name_plot)
p<-tableGrob(printcp(decisionTree.Classification.GINI))
grid.arrange(p)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_CP_PLOT_GINI" ,".png", sep = "")
png(img_name_plot)
plotcp(decisionTree.Classification.GINI)
dev.off()
#prunedDecisionTree = prune(decisionTree, cp= .011)
img_name_plot <- paste("IMG_asteroids_model_DT_","Classification_FANCY_PLOT_GINI", ".png", sep = "")
png(img_name_plot)
fancyRpartPlot(decisionTree.Classification.GINI)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_CP_TABLE_IGHE" ,".png", sep = "")
png(img_name_plot)
p<-tableGrob(printcp(decisionTree.Classification.IGHE))
grid.arrange(p)
dev.off()
img_name_plot <- paste("IMG_asteroids_model_DT_", "Classification_CP_PLOT_IGHE" ,".png", sep = "")
png(img_name_plot)
plotcp(decisionTree.Classification.IGHE)
dev.off()
#prunedDecisionTree = prune(decisionTree, cp= .011)
img_name_plot <- paste("IMG_asteroids_model_DT_","Classification_FANCY_PLOT_IGHE", ".png", sep = "")
png(img_name_plot)
fancyRpartPlot(decisionTree.Classification.IGHE)
dev.off()
rm(folds.stats.namesplit, folds.stats.Classification.trainsplit.Amor, folds.stats.Classification.validsplit.Amor, folds.stats.Classification.trainsplit.Apohele, folds.stats.Classification.validsplit.Apohele, folds.stats.Classification.trainsplit.Apollo, folds.stats.Classification.validsplit.Apollo, folds.stats.Classification.trainsplit.Aten, folds.stats.Classification.validsplit.Aten, )
rm(decisionTree.Classification.GINI)
rm(decisionTree.Classification.GINI.stats, decisionTree.Classification.GINI.prediction, decisionTree.Classification.GINI.confusion_matrix)
rm(asteroids_split, folds, img_name_plot, p)
